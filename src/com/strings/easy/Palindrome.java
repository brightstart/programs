package com.strings.easy;

/*
Problem statement : A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and
removing all non-alphanumeric characters, it reads the same forward and backward.
Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Time complexity
Space complexity
 */
public class Palindrome {

    /*using stringBuilder approach */
    public static boolean isPalindromeV2(String s) {
        if (s.isEmpty()) {
            return true;
        }
        s = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
        String result="";
        for ( int i=s.length()-1;i>=0;i--){
            result+=s.charAt(i);
        }
        System.out.println(result);
        StringBuilder reverseString = new StringBuilder(s);
        String reverse = reverseString.reverse().toString();
        if (s.equals(reverse)) {
            return true;
        } else {
            return false;
        }
    }

    /* delete not matching character */
    public static boolean isPalindrome(String s) {
        if (s.isEmpty()) {
            return true;
        }

        String fixedString = "";
        for (char ch : s.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                fixedString += ch;
            }
        }

        int start = 0;
        int last = fixedString.length() - 1;
        while (start <= last) {
            if (fixedString.toLowerCase().charAt(start) != fixedString.toLowerCase().charAt(last)) {
                return helperMethod(fixedString,start+1,last) || helperMethod(fixedString,start,last-1);
            }
            start++;
            last--;
        }
        return true;
    }

    private static boolean helperMethod(String fixedString, int start, int last) {
        while (start<=last){
        if (fixedString.toLowerCase().charAt(start) != fixedString.toLowerCase().charAt(last)) {
            return false;
        }
        start++;
        last--;}
        return true;
    }



    public static void main(String[] args) {
        boolean result = isPalindrome("ezhcvjohmdvdmirolicyblpgrdcdrhnhmpywartuszaaufjggdbrsocwfwefslflplclltubpzocdqxcvcubxveqkosbrphmoqqlxjifmdumpbchbwxyaneernszgsrcgrbhzsastrmvjgsntvxicvnmkyjxcpgzfwlznuxrdlhrtwktpnfmkjqpugeavlayyhzevicsgzjydketwlrquqcukqyhzxkhrrtmmzfzqvpqmspkamkjgfblbdabddkiepzwseeakddjszyeapgoznixdghlnrhxzgegtlzfrarmpkfmdeitlhxogprzoijwptousenhiezrfsfosehemdhfnapfquzqicotafgjiwrsohhqybcvxysttxjbjxdfqyexibyfvxzywtssmsdmgjcyvljgykdgcyehfnnsoaexalrcqhirjhrmrzcyyzrslktrhxirfpwzhrgzlhgougvhulgybfemvpzqbnqlaxwbxsfqhyohsemnuzykpuyvxtogzeuhqsxsmlsshxdkgqynfhketiqmaumcrtgrlfejjkeckvumefotlhvdhguglzjskzgavatxgzohnpdcqkuayljhuvklksjdmxghqzbomubzeweobzvxvkzfprbpgokncbggdrbrfleskxduugbzevhkkwrsefmyzcygqjofysmwwfujsiypmcobcrhufwvvyabmucgvhobjrwgeqxgxsntvntlocnrnlkpaywpntfpvsohnfiefyzpqfvpcwubyarfuztiutkbdzxramhmbswtwyqvkvqwqiollsebluefuhsliquvjnsdskiqtscmrweqxvubxidacpoqmckdumlewuditgqrkbggkljbqptmiqfghwxbysrggsczwthugkwykmtbvebdbtfepxxvmqrsrnwfctcodouayrbxsqosbfsxvfqhhscvdxvpoaligfxfimkibtsdluwqeghjxuiomkogqehcfzsjescopcssqqpvfejkqivtakfdgsberbvpkcpvpyztxdzfikwgryfimffklvoolakxbwtatnixeltfgnlexemelrbsoybceetympurdhabnzcwnieywkalnmafeacgawfxiczkifxetwqjeylfahqfnlajlwsmetykiewdabsdopuuhoccoowliomgcpxvmtwzoswptzwkeutcpihhfezaapwdwckavdyrvkxghrqoymmtypokeztuucylmbcsccujmyivbgoqhxoswzoibxeujhjbckqtovbjldhoeclsjnnrnlbaigxwkwtqmdrtuhqkwxinzgsfqwrziknqsesmgsnpbfxtawrpdnfuyhiptnjgftutwmhrsjvkbjhclzraojwzdredtjdwbmtbvqtkllwyapjfcbcidhfqdohaxpqmwcogfpbfrnowyozzniomopvcuiezthjhjzoietqlnfljymeyiluhmmljplonghetegljiwuckrinyjieeconisbrcmobjssconvemclkpkflgnlbclqkcwwtabpymywpqbrcwoinjvumqoaqlozmhabahuqzetxcxpfhqpclduxtxwfouiistsgfowfbxyjoyvmmgproaiqelaxwfbqkeaaglgrpnoqjnsjmetsrhbyuzihanojmttaabifnxwwqdbkqlisnvmxhhkodnmxyemhbemgyixxfzrzidzckztvdttuqvvqrofrrdcojsngotsrtxxcjjhgymqgwljmwfufbniuenstjfibjkfqgqhhyfvqhvogfvicjubtkfyqlsshmuwelguuyjqthxjurckedpdbtbtdtsvkmbgfdhejouhfjeusfcridruwswnymvuhxpijyqatwiqjptcokigzrunzzycgzfbydwfkjunsgneasfbofrzfthndvkzygsvzdldebpsgvvdfezarggffmvzxgemfhlrpanvsinzatnxlsegsgohtqwicaimvvcrrqecqsjppmeuzprsvkpcqnmvtmvbbhutyohebrndraqmnboqzemwzwgjdkgxyajgnardaeturqtvsvnkpdopojluskcgprrybepdipidltqvhpumyososzxruimhrpzimbkdqryjdwljusqzerrdtawojzbrwyifvegbonaljsbnezhbprtshokkiiumerxjwpnueiqbenjxzrqxhtldtlcrqsiocsdaavcuasnhciykdkqrewdinluamktistjollnmnakhazphyhiunccziaaljawvykcsrrgvoocwonhdwmvyyavjytcgaggshsthcptqfbslcoxmulkrpzemcppeihsvylzocumigahkkmmursfkfxvqnhgiybaiyeknjlqyeqjscabggohazeukmrpmyffaerqhdiyaczlnidlwendgtipojfvyvqzpvuvmfruegmzouoijdbyikjjfzxntbseksqzgqtxpftxjirrqwjrzwcesjnqnyhnkyllyydhoqlmpazwdornuqeouunmqitwhyabkrzswwaoygvjptzewycrsbdimnbnyuvunibtsqveydfgtvdryxltawymxilsowvwakwxhrqsvmqgevbahpymfrtyikntkkndpvfqgbssubpoirkeppunhipkqbruequvbdvwwjizagfrfucurarawvfhmpjjybxefnybfdyleqfnpbmrkylkkqqnoyzlvnylfbijkrnqmklxnbzjospammuudekykgyljiyddblxfnhxlqvzpczkqhirdpddzvzvehxsyegosgmhonxkljrruuugubylibergbvhazfpsmbxpjunxbynvbvmirmsybujnfgeqzowphfbskyofywfjxccanjnwrbmfnlaqflkpcueipbhmnfxiwrhioeyqdvuryytfhzuwqfkibhrlyrkjvpqmixlxyxxmmwlbrspcuubqsybfjahulgjfyhitblumsofrrrqmncgkgadywwrmrckkgzwpowdzfraooqzbufdkrutgdgqemmxowstxbswepvmgmlvuyxcqhkozcymjzivrxxkcorqpiijdhbthqjarpdtvyypldqvkyyixvzdatgxlgmbqcaxcfpgwspipevltutduhqatolzmxsccyxynmydodkoxujgjfsogqmdbwxcnitaegqyxnddsgiqazexukvkxnxrcpraeyvhvcvjpyiltpzhxykoeilytbqyzhmweqlcunbvhjpqyhheorrelibudeqtbqvvdziywytyrcxtprklkrfwodfdcgssppqhftqrzbfrttnojroelwwvbdfrkmibpmxsmvpgresixsvqsaiyemyvrnkvkrcfpmsjbjmeymgdbcczqtdcfpxrepommjzmuhwsrbcjspczsyxlajzookmgakmzscaxixpjgnpqjcwodsljvmoobsdnvpsbmugmhvlncwkhjnavgaxsgohhvmjyisqnrwybvvwupijuvjfuaotlcacrlcyqsysvilbbzthhyvzdveqrpflgiwpschuaxqbwnqyhvuygducneaapcyobhflvwwrwkkjxptodjoywzjietkbizgmvpvofguyrfkynlsbpuipxjbraatgxdrgqbjhzksigbwaozcwugoxpeipzkmsrpxgwwxfpfyqrvpsqabyxjuwxmqkkuwerjqpkmtaoztkkxyavclcagrizohinolfugkwflbamoakgqmjvwqjvlkquelaaszgshwrlqpiirbcqnjjngvrjorwzjbuldmsrtupeyrxypfhhyftehjcobrktryyerbfxbnyfskqaakjehbsftercfinmcujzrexlsxoybafaqwxrdyxbonncxrhjmtrelvgudfkmeelvygcrbwfaxzgbxlauqeichxjwpyujjikdlwfckhkcvppceguafzrtbzalwglfjzrtegwhtoavxudabsrmuryubgeekckwiatzhtmtculnpcijzglkbzyaiedxdgvbnrkoukbjcrfusowhjvvzxlucuoktwcbyjxhxtffusythvooigwgwprtnekupafidujzbpbmllpgiwtjeepljjwaldgapsoiarwqydllmdlhcnfaxmllgvitonfchtduicsqdwhsuewvgjkxbmeuvjmdluysuzkajbqasgibjjvghtjhxmreycmsqedumkiqvpgttwhnwtrxgwullrqqlfocfqmxopfvowmrzyxxkcjvaezqrsotydhszxddmocnjwftybzifonqsxruccezhhwyestmgpthfyxcuelomzacbdorjuqjcoqydeijsakiephbvtwccfkvkkzfumcsbumetodjsgpxwnnwfjtywtzunvnwkvqkyetnwpasjadfldagxgalqoqyzrngrfxejapmmcmlmivvkxcviecbdseuxsbdlpbulkafwrnltywxgchyupsjpfkxgozhbsqcotqshekudtofysxzchhegxuquohjhoqyvrwsbaqxbsvozedldbmvcutsealtrctwxowpkowfjpzjbaxixexealwjvuaxbswgeofabtgzglrivuvwochfyguuvrvdusxgoaeresmubqkxmljichkdzbuwtlyngpjnsdocrrmsphxxptkpmvuhognqqtmopbrxavftkfbbyivpfcehstgqncvixllvcqtjuanfrifvmcqvsdgnotbqvbaocapzupnmtfkgarkjjiqfuohfpyvbpnitcvirmwbbmjebitlfkronvefxgbuzzqahzrsgsysyjauaunlfhclvagkpeohuwlkmlzqahbcfratkmuxofhqcjpxibftucscninykgsvrbqrrzmscskodeuhnvjzrauqiadfjsnibcbocbgtlhchxyzxcsyoojckcyltnqodnywbyzlplnlsesftfbplfkympbtcpjlgnimhfzjusmojjjmosittisomjjjomsujzfhmingljpctbpmykflpbftfseslnlplzybwyndoqntlyckcjooyscxzyxhchltgbcobcbinsjfdaiquarzjvnhuedokscsmzrrqbrvsgkynincscutfbixpjcqhfoxumktarfcbhaqzlmklwuhoepkgavlchflnuauajysysgsrzhaqzzubgxfevnorkfltibejmbbwmrivctinpbvypfhoufqijjkragkftmnpuzpacoabvqbtongdsvqcmvfirfnaujtqcvllxivcnqgtshecfpviybbfktfvaxrbpomtqqngohuvmpktpxxhpsmrrcodsnjpgnyltwubzdkhcijlmxkqbumsereaogxsudvrvuugyfhcowvuvirlgzgtbafoegwsbxauvjwlaexexixabjzpjfwokpwoxwtcrtlaestucvmbdldezovsbxqabswrvyqohjhouquxgehhczxsyfotdukehsqtocqsbhzogxkfpjspuyhcgxwytlnrwfaklubpldbsxuesdbceivcxkvvimlmcmmpajexfrgnrzyqoqlagxgadlfdajsapwnteykqvkwnvnuztwytjfwnnwxpgsjdotemubscmufzkkvkfccwtvbhpeikasjiedyqocjqujrodbcazmoleucxyfhtpgmtseywhhzeccurxsqnofizbytfwjncomddxzshdytosrqzeavjckxxyzrmwovfpoxmqfcoflqqrlluwgxrtwnhwttgpvqikmudeqsmcyermxhjthgvjjbigsaqbjakzusyuldmjvuembxkjgvweushwdqsciudthcfnotivgllmxafnchldmlldyqwraiospagdlawjjlpeejtwigpllmbpbzjudifapukentrpwgwgioovhtysufftxhxjbcwtkouculxzvvjhwosufrcjbkuokrnbvgdxdeiayzbklgzjicpnluctmthztaiwkckeegbuyrumrsbaduxvaothwgetrzjflgwlazbtrzfaugecppvckhkcfwldkijjuypwjxhciequalxbgzxafwbrcgyvleemkfdugvlertmjhrxcnnobxydrxwqafabyoxslxerzjucmnifcretfsbhejkaaqksfynbxfbreyyrtkrbocjhetfyhhfpyxryeputrsmdlubjzwrojrvgnjjnqcbriipqlrwhsgzsaaleuqklvjqwvjmqgkaomablfwkguflonihozirgaclcvayxkktzoatmkpqjrewukkqmxwujxybaqspvrqyfpfxwwgxprsmkzpiepxoguwczoawbgiskzhjbqgrdxgtaarbjxpiupbslnykfryugfovpvmgzibkteijzwyojdotpxjkkwrwwvlfhboycpaaencudgyuvhyqnwbqxauhcspwiglfprqevdzvyhhtzbblivsysqyclrcacltoaufjvujipuwvvbywrnqsiyjmvhhogsxagvanjhkwcnlvhmgumbspvndsboomvjlsdowcjqpngjpxixacszmkagmkoozjalxyszcpsjcbrswhumzjmmoperxpfcdtqzccbdgmyemjbjsmpfcrkvknrvymeyiasqvsxisergpvmsxmpbimkrfdbvwwleorjonttrfbzrqtfhqppssgcdfdowfrklkrptxcrytywyizdvvqbtqedubilerroehhyqpjhvbnuclqewmhzyqbtylieokyxhzptliypjvcvhvyearpcrxnxkvkuxezaqigsddnxyqgeatincxwbdmqgosfjgjuxokdodymnyxyccsxmzlotaqhudtutlvepipswgpfcxacqbmglxgtadzvxiyykvqdlpyyvtdprajqhtbhdjiipqrockxxrvizjmyczokhqcxyuvlmgmvpewsbxtswoxmmeqgdgturkdfubzqooarfzdwopwzgkkcrmrwwydagkgcnmqrrrfosmulbtihyfjgluhajfbysqbuucpsrblwmmxxyxlximqpvjkrylrhbikfqwuzhftyyruvdqyeoihrwixfnmhbpieucpklfqalnfmbrwnjnaccxjfwyfoyksbfhpwozqegfnjubysmrimvbvnybxnujpxbmspfzahvbgrebilybuguuurrjlkxnohmgsogeysxhevzvzddpdrihqkzcpzvqlxhnfxlbddyijlygkykeduummapsojzbnxlkmqnrkjibflynvlzyonqqkklykrmbpnfqelydfbynfexbyjjpmhfvwararucufrfgazijwwvdbvuqeurbqkpihnuppekriopbussbgqfvpdnkktnkiytrfmyphabvegqmvsqrhxwkawvwoslixmywatlxyrdvtgfdyevqstbinuvuynbnmidbsrcyweztpjvgyoawwszrkbayhwtiqmnuuoequnrodwzapmlqohdyyllyknhynqnjsecwzrjwqrrijxtfpxtqgzqskesbtnxzfjjkiybdjiouozmgeurfmvuvpzqvyvfjopitgdnewldinlzcayidhqreaffymprmkuezahoggbacsjqeyqljnkeyiabyighnqvxfkfsrummkkhagimucozlyvshieppcmezprklumxoclsbfqtpchtshsggagctyjvayyvmwdhnowcoovgrrsckyvwajlaaizccnuihyhpzahkanmnllojtsitkmaulnidwerqkdkyichnsaucvaadscoisqrcltdlthxqrzxjnebqieunpwjxremuiikkohstrpbhzenbsjlanobgevfiywrbzjowatdrrezqsujlwdjyrqdkbmizprhmiurxzsosoymuphvqtldipidpebyrrpgcksuljopodpknvsvtqruteadrangjayxgkdjgwzwmezqobnmqardnrbehoytuhbbvmtvmnqcpkvsrpzuemppjsqceqrrcvvmiaciwqthogsgeslxntaznisvnaprlhfmegxzvmffggrazefdvvgspbedldzvsgyzkvdnhtfzrfobfsaengsnujkfwdybfzgcyzznurzgikoctpjqiwtaqyjipxhuvmynwswurdircfsuejfhuojehdfgbmkvstdtbtbdpdekcrujxhtqjyuuglewumhsslqyfktbujcivfgovhqvfyhhqgqfkjbifjtsneuinbfufwmjlwgqmyghjjcxxtrstognsjocdrrforqvvquttdvtzkczdizrzfxxiygmebhmeyxmndokhhxmvnsilqkbdqwwxnfibaattmjonahizuybhrstemjsnjqonprglgaaekqbfwxaleqiaorpgmmvyojyxbfwofgstsiiuofwxtxudlcpqhfpxcxtezquhabahmzolqaoqmuvjniowcrbqpwymypbatwwckqlcblnglfkpklcmevnocssjbomcrbsinoceeijynirkcuwijlgetehgnolpjlmmhuliyemyjlfnlqteiozjhjhtzeiucvpomoinzzoywonrfbpfgocwmqpxahodqfhdicbcfjpaywllktqvbtmbwdjtderdzwjoarzlchjbkvjsrhmwtutfgjntpihyufndprwatxfbpnsgmsesqnkizrwqfsgznixwkqhutrdmqtwkwxgiablnrnnjslceohdljbvotqkcbjhjuexbiozwsoxhqogbviymjuccscbmlycuutzekopytmmyoqrhgxkvrydvakcwdwpaazefhhipctuekwztpwsozwtmvxpcgmoilwooccohuupodsbadweikytemswljalnfqhaflyejqwtexfikzcixfwagcaefamnlakwyeinwcznbahdrupmyteecbyosbrlemexelngftlexintatwbxkaloovlkffmifyrgwkifzdxtzypvpckpvbrebsgdfkatviqkjefvpqqsscpocsejszfcheqgokmoiuxjhgeqwuldstbikmifxfgilaopvxdvcshhqfvxsfbsoqsxbryauodoctcfwnrsrqmvxxpeftbdbevbtmkywkguhtwzcsggrsybxwhgfqimtpqbjlkggbkrqgtiduwelmudkcmqopcadixbuvxqewrmcstqiksdsnjvuqilshufeulbeslloiqwqvkvqywtwsbmhmarxzdbktuitzufraybuwcpvfqpzyfeifnhosvpftnpwyapklnrncoltnvtnsxgxqegwrjbohvgcumbayvvwfuhrcbocmpyisjufwwmsyfojqgyczymfesrwkkhvezbguudxkselfrbrdggbcnkogpbrpfzkvxvzboewezbumobzqhgxmdjsklkvuhjlyaukqcdpnhozgxtavagzksjzlgughdvhltofemuvkcekjjeflrgtrcmuamqitekhfnyqgkdxhsslmsxsqhuezgotxvyupkyzunmeshoyhqfsxbwxalqnbqzpvmefbygluhvguoghlzgrhzwpfrixhrtklsrzyyczrmrhjrihqcrlaxeaosnnfheycgdkygjlvycjgmdsmsstwyzxvfybixeyqfdxjbjxttsyxvcbyqhhosrwijgfatociqzuqfpanfhdmehesofsfrzeihnesuotpwjiozrpgoxhltiedmfkpmrarfzltgegzxhrnlhgdxinzogpaeyzsjddkaeeswzpeikddbadblbfgjkmakpsmqpvqzfzmmtrrhkxzhyqkucquqrlwtekdyjzgscivezhyyalvaegupqjkmfnptkwtrhldrxunzlwfzgpcxjykmnvcixvtnsgjvmrtsaszhbrgcrsgzsnreenayxwbhcbpmudmfijxlqqomhprbsokqevxbucvcxqdcozpbutllclplflsfewfwcosrbdggjfuaazsutrawypmhnhrdcdrgplbycilorimdvdmhojvchze");
        System.out.println(result);
    }
}
